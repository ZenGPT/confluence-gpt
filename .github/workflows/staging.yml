name: Deploy to staging

on:
  push:
    tags-ignore:
      - '**' # do not run on tags
    branches: ['main', 'staging/**']
  pull_request:
    branches: ['main', 'staging/**']

jobs:
  init_build_version:
    name: init build version
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Git Info File
        uses: ./.github/actions/git-info
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          VERSION="$(echo $(date +'v%Y.%m.%d')_${{ github.run_number }}_$(git rev-parse --short=8 HEAD))"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "BUILDTIME=$(echo $(date -u))" >>  "$GITHUB_OUTPUT"
          echo "artifactName=gpt_ace.$VERSION.zip" >> "$GITHUB_OUTPUT"
    outputs:
      VERSION: ${{ steps.properties.outputs.VERSION }}
      BUILDTIME: ${{ steps.properties.outputs.BUILDTIME }}
      artifactName: ${{ steps.properties.outputs.artifactName }}

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: npm
      - name: Install dependencies
        run: npm install
      - name: Test
        run: npm run lint && npm run test

  staging-deploy:
    name: Deploy to staging
    needs: 
      - test
      - init_build_version
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: npm
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: package app
        run: zip -qq -r /tmp/${{ needs.init_build_version.outputs.artifactName }} *  -x .cache/ .github/**\* .vscode/**\* .git/ 
        
      - name: create a prerelease
        id: createPrerelease
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ needs.init_build_version.outputs.VERSION }}
          name: ${{ needs.init_build_version.outputs.VERSION }}
          body: "${{ needs.init_build_version.outputs.VERSION }},branch:${{ github.head_ref || github.ref_name }}, build time: ${{ needs.init_build_version.outputs.BUILDTIME }}"
          draft: true
          prerelease: false
          files: |
            /tmp/${{ needs.init_build_version.outputs.artifactName }}
      - name: Generate Git Info File
        uses: ./.github/actions/git-info
        # rsync command has to be existed on the remote server.
      - name: Deploy to server
        uses: easingthemes/ssh-deploy@v4.1.8
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          REMOTE_HOST: ${{ secrets.HOST_IP }}
          REMOTE_USER: ${{ secrets.HOST_USER }}
          TARGET: /home/${{ secrets.HOST_USER }}/gpt_ace/
          EXCLUDE: '/.cache/, /.github/, /.vscode/, /.git/, /node_modules/, /devops/, /config.json, /atlassian-connect.json, /credentials.json'
          SCRIPT_AFTER: |
            cd /home/${{ secrets.HOST_USER }}/gpt_ace/
            npm install --production
            export DATABASE_URL=postgresql://${{ secrets.GPT_ACE_DB_USERNAME }}:${{ secrets.GPT_ACE_DB_PASSWORD }}@${{secrets.POSTGRESQL_BIND_INNER_IP }}:5432/${{ secrets.GPT_ACE_DB_NAME }}
            export LOCAL_BASE_URL=https://conf-gpt-stag.zenuml.com
            export PORT=3000
            export NODE_ENV=production
            pm2 reload app #otherwise the server may cache the old version (e.g. atlassian-connect.json)

  staging-install:
    name: Install staging to Confluence
    needs: staging-deploy
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install
        run: |
          pip3 install pluploader
          pluploader --base-url https://gpt-dock-stag.atlassian.net --user ${{ secrets.ZENUML_STAGE_GPT_ACE_UPM_USER }} --password ${{ secrets.ZENUML_STAGE_GPT_ACE_UPM_PASSWORD }} install --cloud --plugin-uri https://conf-gpt-stag.zenuml.com/atlassian-connect.json
